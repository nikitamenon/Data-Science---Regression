{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Regression Data Exploration Report: Real Estate Price Prediction\n",
    "#### Link to Data Set: https://www.kaggle.com/quantbruce/real-estate-price-prediction"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "import os\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "df = pd.read_csv(\"Real estate.csv\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>No</th>\n",
       "      <th>X1 transaction date</th>\n",
       "      <th>X2 house age</th>\n",
       "      <th>X3 distance to the nearest MRT station</th>\n",
       "      <th>X4 number of convenience stores</th>\n",
       "      <th>X5 latitude</th>\n",
       "      <th>X6 longitude</th>\n",
       "      <th>Y house price of unit area</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>2012.917</td>\n",
       "      <td>32.0</td>\n",
       "      <td>84.87882</td>\n",
       "      <td>10</td>\n",
       "      <td>24.98298</td>\n",
       "      <td>121.54024</td>\n",
       "      <td>37.9</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>2012.917</td>\n",
       "      <td>19.5</td>\n",
       "      <td>306.59470</td>\n",
       "      <td>9</td>\n",
       "      <td>24.98034</td>\n",
       "      <td>121.53951</td>\n",
       "      <td>42.2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>2013.583</td>\n",
       "      <td>13.3</td>\n",
       "      <td>561.98450</td>\n",
       "      <td>5</td>\n",
       "      <td>24.98746</td>\n",
       "      <td>121.54391</td>\n",
       "      <td>47.3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4</td>\n",
       "      <td>2013.500</td>\n",
       "      <td>13.3</td>\n",
       "      <td>561.98450</td>\n",
       "      <td>5</td>\n",
       "      <td>24.98746</td>\n",
       "      <td>121.54391</td>\n",
       "      <td>54.8</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5</td>\n",
       "      <td>2012.833</td>\n",
       "      <td>5.0</td>\n",
       "      <td>390.56840</td>\n",
       "      <td>5</td>\n",
       "      <td>24.97937</td>\n",
       "      <td>121.54245</td>\n",
       "      <td>43.1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   No  X1 transaction date  X2 house age  \\\n",
       "0   1             2012.917          32.0   \n",
       "1   2             2012.917          19.5   \n",
       "2   3             2013.583          13.3   \n",
       "3   4             2013.500          13.3   \n",
       "4   5             2012.833           5.0   \n",
       "\n",
       "   X3 distance to the nearest MRT station  X4 number of convenience stores  \\\n",
       "0                                84.87882                               10   \n",
       "1                               306.59470                                9   \n",
       "2                               561.98450                                5   \n",
       "3                               561.98450                                5   \n",
       "4                               390.56840                                5   \n",
       "\n",
       "   X5 latitude  X6 longitude  Y house price of unit area  \n",
       "0     24.98298     121.54024                        37.9  \n",
       "1     24.98034     121.53951                        42.2  \n",
       "2     24.98746     121.54391                        47.3  \n",
       "3     24.98746     121.54391                        54.8  \n",
       "4     24.97937     121.54245                        43.1  "
      ]
     },
     "execution_count": 24,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Part 1 - Summary\n",
    "\n",
    "#### Selected Variables: Distance to Nearest MRT Station & House Price of Unit Area"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 77,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1083.89"
      ]
     },
     "execution_count": 77,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "text/plain": [
       "38.0"
      ]
     },
     "execution_count": 77,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "MeanDistance = df[\"X3 distance to the nearest MRT station\"].mean()\n",
    "round(MeanDistance,2)\n",
    "\n",
    "MeanPrice = df[\"Y house price of unit area\"].mean()\n",
    "round(MeanPrice, 1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 76,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "6488.021"
      ]
     },
     "execution_count": 76,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "text/plain": [
       "23.382839999999998"
      ]
     },
     "execution_count": 76,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "text/plain": [
       "117.5"
      ]
     },
     "execution_count": 76,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "text/plain": [
       "7.6"
      ]
     },
     "execution_count": 76,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df[\"X3 distance to the nearest MRT station\"].max()\n",
    "df[\"X3 distance to the nearest MRT station\"].min()\n",
    "\n",
    "df[\"Y house price of unit area\"].max()\n",
    "df[\"Y house price of unit area\"].min()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "6464.64"
      ]
     },
     "execution_count": 26,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "text/plain": [
       "109.9"
      ]
     },
     "execution_count": 26,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "RangeDistance = df[\"X3 distance to the nearest MRT station\"].max() - df[\"X3 distance to the nearest MRT station\"].min()\n",
    "round (RangeDistance,2)\n",
    "\n",
    "RangePrice = df[\"Y house price of unit area\"].max() - df[\"Y house price of unit area\"].min()\n",
    "RangePrice\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0.5, 0, 'Distance from MRT')"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "text/plain": [
       "Text(0, 0.5, 'Number of Transactions')"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "text/plain": [
       "(array([251.,  42.,  47.,  30.,   7.,   3.,  27.,   2.,   2.,   3.]),\n",
       " array([  23.38284 ,  669.846656, 1316.310472, 1962.774288, 2609.238104,\n",
       "        3255.70192 , 3902.165736, 4548.629552, 5195.093368, 5841.557184,\n",
       "        6488.021   ]),\n",
       " <a list of 10 Patch objects>)"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.xlabel('Distance from MRT')\n",
    "plt.ylabel('Number of Transactions')\n",
    "plt.hist(df[\"X3 distance to the nearest MRT station\"],color = \"hotpink\")\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0.5, 0, 'Price of Unit')"
      ]
     },
     "execution_count": 28,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "text/plain": [
       "Text(0, 0.5, 'Number of Transactions')"
      ]
     },
     "execution_count": 28,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "text/plain": [
       "(array([ 28.,  95., 111., 115.,  52.,   9.,   3.,   0.,   0.,   1.]),\n",
       " array([  7.6 ,  18.59,  29.58,  40.57,  51.56,  62.55,  73.54,  84.53,\n",
       "         95.52, 106.51, 117.5 ]),\n",
       " <a list of 10 Patch objects>)"
      ]
     },
     "execution_count": 28,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.xlabel('Price of Unit')\n",
    "plt.ylabel('Number of Transactions')\n",
    "plt.hist(df[\"Y house price of unit area\"],color = \"purple\")\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Summary\n",
    "\n",
    "The two numeric variables I picked to compare are 'Distance to Nearest MRT Station' (refered to as first variable) and 'Price of Unit Area'(refered to as second variable). The mean distance to nearest MRT Station is 1083.89m (rounded to 2 dp) while the mean price of unit area is 38.0. The maximum and minimum values of the first variable are 6488.02m and 23.38m respectively while for the second variable, these values are 117.5 and 7.6. The range of the first variable is 6464.64m while the range of the second variable is 109.0. Both variables have a left skewed distribution whereby the first variable has a more extreme skew whereas the second variable is gently skewed and would be of a normal distribution if not for the outlier in the data. \n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Part 2 - Plot & Correlation "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.collections.PathCollection at 0x7f9918c9d3a0>"
      ]
     },
     "execution_count": 29,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "text/plain": [
       "Text(0.5, 0, 'Distance to MRT')"
      ]
     },
     "execution_count": 29,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "text/plain": [
       "Text(0, 0.5, 'House Price of Unit Area')"
      ]
     },
     "execution_count": 29,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "text/plain": [
       "Text(0.5, 1.0, 'Relationship Between Distance to MRT and Price')"
      ]
     },
     "execution_count": 29,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.scatter(df[\"X3 distance to the nearest MRT station\"],df[\"Y house price of unit area\"],color='hotpink')\n",
    "plt.grid()\n",
    "plt.xlabel('Distance to MRT')\n",
    "plt.ylabel('House Price of Unit Area')\n",
    "plt.title ('Relationship Between Distance to MRT and Price')\n",
    "\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "-0.6736128553689182"
      ]
     },
     "execution_count": 30,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>No</th>\n",
       "      <th>X1 transaction date</th>\n",
       "      <th>X2 house age</th>\n",
       "      <th>X3 distance to the nearest MRT station</th>\n",
       "      <th>X4 number of convenience stores</th>\n",
       "      <th>X5 latitude</th>\n",
       "      <th>X6 longitude</th>\n",
       "      <th>Y house price of unit area</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>No</th>\n",
       "      <td>1.000000</td>\n",
       "      <td>-0.048658</td>\n",
       "      <td>-0.032808</td>\n",
       "      <td>-0.013573</td>\n",
       "      <td>-0.012699</td>\n",
       "      <td>-0.010110</td>\n",
       "      <td>-0.011059</td>\n",
       "      <td>-0.028587</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>X1 transaction date</th>\n",
       "      <td>-0.048658</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.017549</td>\n",
       "      <td>0.060880</td>\n",
       "      <td>0.009635</td>\n",
       "      <td>0.035058</td>\n",
       "      <td>-0.041082</td>\n",
       "      <td>0.087491</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>X2 house age</th>\n",
       "      <td>-0.032808</td>\n",
       "      <td>0.017549</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.025622</td>\n",
       "      <td>0.049593</td>\n",
       "      <td>0.054420</td>\n",
       "      <td>-0.048520</td>\n",
       "      <td>-0.210567</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>X3 distance to the nearest MRT station</th>\n",
       "      <td>-0.013573</td>\n",
       "      <td>0.060880</td>\n",
       "      <td>0.025622</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>-0.602519</td>\n",
       "      <td>-0.591067</td>\n",
       "      <td>-0.806317</td>\n",
       "      <td>-0.673613</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>X4 number of convenience stores</th>\n",
       "      <td>-0.012699</td>\n",
       "      <td>0.009635</td>\n",
       "      <td>0.049593</td>\n",
       "      <td>-0.602519</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.444143</td>\n",
       "      <td>0.449099</td>\n",
       "      <td>0.571005</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>X5 latitude</th>\n",
       "      <td>-0.010110</td>\n",
       "      <td>0.035058</td>\n",
       "      <td>0.054420</td>\n",
       "      <td>-0.591067</td>\n",
       "      <td>0.444143</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.412924</td>\n",
       "      <td>0.546307</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>X6 longitude</th>\n",
       "      <td>-0.011059</td>\n",
       "      <td>-0.041082</td>\n",
       "      <td>-0.048520</td>\n",
       "      <td>-0.806317</td>\n",
       "      <td>0.449099</td>\n",
       "      <td>0.412924</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.523287</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Y house price of unit area</th>\n",
       "      <td>-0.028587</td>\n",
       "      <td>0.087491</td>\n",
       "      <td>-0.210567</td>\n",
       "      <td>-0.673613</td>\n",
       "      <td>0.571005</td>\n",
       "      <td>0.546307</td>\n",
       "      <td>0.523287</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                              No  X1 transaction date  \\\n",
       "No                                      1.000000            -0.048658   \n",
       "X1 transaction date                    -0.048658             1.000000   \n",
       "X2 house age                           -0.032808             0.017549   \n",
       "X3 distance to the nearest MRT station -0.013573             0.060880   \n",
       "X4 number of convenience stores        -0.012699             0.009635   \n",
       "X5 latitude                            -0.010110             0.035058   \n",
       "X6 longitude                           -0.011059            -0.041082   \n",
       "Y house price of unit area             -0.028587             0.087491   \n",
       "\n",
       "                                        X2 house age  \\\n",
       "No                                         -0.032808   \n",
       "X1 transaction date                         0.017549   \n",
       "X2 house age                                1.000000   \n",
       "X3 distance to the nearest MRT station      0.025622   \n",
       "X4 number of convenience stores             0.049593   \n",
       "X5 latitude                                 0.054420   \n",
       "X6 longitude                               -0.048520   \n",
       "Y house price of unit area                 -0.210567   \n",
       "\n",
       "                                        X3 distance to the nearest MRT station  \\\n",
       "No                                                                   -0.013573   \n",
       "X1 transaction date                                                   0.060880   \n",
       "X2 house age                                                          0.025622   \n",
       "X3 distance to the nearest MRT station                                1.000000   \n",
       "X4 number of convenience stores                                      -0.602519   \n",
       "X5 latitude                                                          -0.591067   \n",
       "X6 longitude                                                         -0.806317   \n",
       "Y house price of unit area                                           -0.673613   \n",
       "\n",
       "                                        X4 number of convenience stores  \\\n",
       "No                                                            -0.012699   \n",
       "X1 transaction date                                            0.009635   \n",
       "X2 house age                                                   0.049593   \n",
       "X3 distance to the nearest MRT station                        -0.602519   \n",
       "X4 number of convenience stores                                1.000000   \n",
       "X5 latitude                                                    0.444143   \n",
       "X6 longitude                                                   0.449099   \n",
       "Y house price of unit area                                     0.571005   \n",
       "\n",
       "                                        X5 latitude  X6 longitude  \\\n",
       "No                                        -0.010110     -0.011059   \n",
       "X1 transaction date                        0.035058     -0.041082   \n",
       "X2 house age                               0.054420     -0.048520   \n",
       "X3 distance to the nearest MRT station    -0.591067     -0.806317   \n",
       "X4 number of convenience stores            0.444143      0.449099   \n",
       "X5 latitude                                1.000000      0.412924   \n",
       "X6 longitude                               0.412924      1.000000   \n",
       "Y house price of unit area                 0.546307      0.523287   \n",
       "\n",
       "                                        Y house price of unit area  \n",
       "No                                                       -0.028587  \n",
       "X1 transaction date                                       0.087491  \n",
       "X2 house age                                             -0.210567  \n",
       "X3 distance to the nearest MRT station                   -0.673613  \n",
       "X4 number of convenience stores                           0.571005  \n",
       "X5 latitude                                               0.546307  \n",
       "X6 longitude                                              0.523287  \n",
       "Y house price of unit area                                1.000000  "
      ]
     },
     "execution_count": 30,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from scipy import stats\n",
    "from sklearn.metrics import r2_score\n",
    "\n",
    "def rmse(targets, predictions):\n",
    "    return np.sqrt(((predictions - targets) ** 2).mean())\n",
    "\n",
    "r, p = stats.pearsonr(df[\"X3 distance to the nearest MRT station\"],df[\"Y house price of unit area\"])\n",
    "r\n",
    "df.corr()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Summary\n",
    "\n",
    "The two variables are negatively correlated as seen from the plot and the correlation coeffiecient of -0.67. The negative correlation indicates that both variables have a statistical relationship such that the price of property decreases as the distance to the nearest MRT station increases. This suggests that the properties closest to MRT stations are of higher value. "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    " ### Part 3 - Linear Regression Model\n",
    "\n",
    "#### Selected Variables: Distance to Nearest MRT Station & House Price of Unit Area"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [],
   "source": [
    "x = df.drop(['Y house price of unit area'], axis=1)\n",
    "y = df['Y house price of unit area']\n",
    "\n",
    "from sklearn.model_selection import train_test_split\n",
    "X_train, X_test, y_train, y_test = train_test_split(x, y, test_size = 0.20, random_state = 157)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {},
   "outputs": [],
   "source": [
    "x_train = X_train['X3 distance to the nearest MRT station']\n",
    "x_test = X_test['X3 distance to the nearest MRT station']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [],
   "source": [
    "x_train_expanded = np.expand_dims(x_train, axis=1)\n",
    "x_test_expanded = np.expand_dims(x_test, axis=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "LinearRegression()"
      ]
     },
     "execution_count": 34,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sklearn.linear_model import LinearRegression\n",
    "regressor = LinearRegression()\n",
    "regressor.fit(x_train_expanded, y_train)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[-0.00741423] 46.31986975824448\n"
     ]
    }
   ],
   "source": [
    "print(regressor.coef_, regressor.intercept_)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {},
   "outputs": [],
   "source": [
    "predictions = regressor.predict(x_test_expanded)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The R2 score is: 0.391982510044381\n",
      "The RMSE score is 10.340101291784409\n"
     ]
    }
   ],
   "source": [
    "print(f'The R2 score is: {r2_score(y_test, predictions)}')\n",
    "print(f'The RMSE score is {rmse(y_test, predictions)}')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.collections.PathCollection at 0x7f991a97d7c0>"
      ]
     },
     "execution_count": 38,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "text/plain": [
       "[<matplotlib.lines.Line2D at 0x7f991a97dca0>]"
      ]
     },
     "execution_count": 38,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "text/plain": [
       "Text(0.5, 1.0, 'Distance vs Price (Training set)')"
      ]
     },
     "execution_count": 38,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "text/plain": [
       "Text(0.5, 0, 'Distance (X)')"
      ]
     },
     "execution_count": 38,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "text/plain": [
       "Text(0, 0.5, 'Price(Y)')"
      ]
     },
     "execution_count": 38,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.scatter(x_train_expanded, y_train, color = 'purple')\n",
    "plt.plot(x_train_expanded, regressor.predict(x_train_expanded), color = 'hotpink')\n",
    "plt.title('Distance vs Price (Training set)')\n",
    "plt.xlabel('Distance (X)')\n",
    "plt.ylabel('Price(Y)')\n",
    "\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.collections.PathCollection at 0x7f991a9d2df0>"
      ]
     },
     "execution_count": 39,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "text/plain": [
       "[<matplotlib.lines.Line2D at 0x7f991a9e0370>]"
      ]
     },
     "execution_count": 39,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "text/plain": [
       "Text(0.5, 1.0, 'Distance vs Price (Test set)')"
      ]
     },
     "execution_count": 39,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "text/plain": [
       "Text(0.5, 0, 'Distance (X)')"
      ]
     },
     "execution_count": 39,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "text/plain": [
       "Text(0, 0.5, 'Price(Y)')"
      ]
     },
     "execution_count": 39,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.scatter(x_test_expanded, y_test, color = 'hotpink')\n",
    "plt.plot(x_test_expanded, regressor.predict(x_test_expanded), color = 'purple')\n",
    "plt.title('Distance vs Price (Test set)')\n",
    "plt.xlabel('Distance (X)')\n",
    "plt.ylabel('Price(Y)')\n",
    "\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "4.639825030360989e-56"
      ]
     },
     "execution_count": 41,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "p"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Summary \n",
    "\n",
    "The fitted plot lines of the predictor and response variables in both the training and test data, paired with the p-value that is significantly less than 0.05, it can be concluded that the distance to mrt is a statistically significant parameter for the house price per unit area. The model was a better fit on the training data than on the testing data. From the results from my training data, it can be seen that the price per unit area of the house decreased by 0.0074 for every meter increase in distance to nearest MRT station from when the price per unit area is 46.31."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Part 4 - Multiple Regression Model "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 70,
   "metadata": {},
   "outputs": [],
   "source": [
    "x2 = df[['X3 distance to the nearest MRT station','X2 house age','X4 number of convenience stores']]\n",
    "y2 = df['Y house price of unit area']\n",
    "\n",
    "from sklearn.model_selection import train_test_split\n",
    "x2_train, x2_test, y2_train, y2_test = train_test_split(x2, y2, test_size = 0.20, random_state = 157)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 72,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "LinearRegression()"
      ]
     },
     "execution_count": 72,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[-0.00582748 -0.25412239  1.08511582] 44.62531102443829\n"
     ]
    }
   ],
   "source": [
    "regr.fit(x2_train, y2_train)\n",
    "print(regr.coef_, regr.intercept_)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 79,
   "metadata": {},
   "outputs": [],
   "source": [
    "predictions2 = regr.predict(x2_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 80,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The R2 score is: 0.5213211680477638\n",
      "The RMSE score is 9.17463653974401\n"
     ]
    }
   ],
   "source": [
    "print(f'The R2 score is: {r2_score(y2_test, predictions2)}')\n",
    "print(f'The RMSE score is {rmse(y2_test, predictions2)}')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 73,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([47.64929087])"
      ]
     },
     "execution_count": 73,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "regr.predict([[306.59470,19.5,9]])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Summary \n",
    "\n",
    "The variables used for the multiple regression model are distance to nearest MRT station, house age, number of convenience stores and house price per unit area. It can be seen that for every meter increase in distance to nearest MRT station, the price per unit area decreased by 0.0058; for every year increase in age of the property, the unit price decreased by 0.25; for every extra convenience store in the area, the unit price of property increased by 1.09 after unit price of the house is 44.63. When a random data point from the data set was inputted into the model, \n",
    "the predicted price per unit area for the property was 47.6 which is 5.4 more than the corresponding value listed in the data set. Adding the additional 2 variables improved the model as seen from the R2 score of 0.52 for the multiple regression model as compared to 0.39 of the linear regression model. \n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Part 5 - Ethical Issues & Potential to Improve "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Ethical Issues \n",
    "\n",
    "There are many intangible factors that may contribute to the price of the house such as interior decor, history, architectural design, availability of amenities etc, that cannot be numerically represented. If this model were to be used, many houses may become undervalued/overvalued since the model is unable to take these factors into consideration, causing buyers/sellers to face losses during transaction. \n",
    "\n",
    "#### Potential Improvement\n",
    "\n",
    "The model could be refined if variables such as floor, street safety index, availability of eateries, distance to city centre, and availability of bus routes were included in the data. The inclusion of these variable will help us better understand the correlation of factors with the price. This will also allow us to create a model that can analyse the relationship between the availability of different modes of transport (bus/MRT) with the price of the house and determine if one is more important to buyers than the other. \n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
